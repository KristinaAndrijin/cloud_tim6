service: aws-tim6

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  profile: serverlessUser
  region: eu-central-1
  stage: dev
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminGetUser
        - cognito-idp:ListUsers
        - cognito-idp:*
      Resource:
        - arn:aws:cognito-idp:eu-central-1:275505252693:userpool/eu-central-1_JTv6FBTKX

    - Effect: Allow
      Action:
        - sns:Publish
        - sns:Subscribe
      Resource:
        - arn:aws:sns:eu-central-1:275505252693:SNSTopic

    - Effect: Allow
      Action:
        - ses:*
      Resource: 
        - arn:aws:ses:eu-central-1:275505252693:identity/aws.tim6@gmail.com


functions:
  hello_from_other_func:
    handler: handler.hello
    package:
      patterns:
        - 'handler.py'
    events:
      - http:
          path: hello
          method: GET
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  get_users:
    handler: cognito-users.get_users
    package:
      patterns:
        - 'cognito-users.py'
    events:
      - http:
          path: getUsers
          method: GET
          cors: true
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: ApiGatewayAuthorizer

  publish:
    handler: sns.publish
    package:
      patterns:
        - 'sns.py'
    events:
      - http:
          path: publish
          method: GET
          cors: true

  subscribe:
    handler: sns.subscribe
    package:
      patterns:
        - 'sns.py'
    events:
      - http:
          path: subscribe
          method: GET
          cors: true

  sendEmail:
    handler: ses.send_email
    package:
      patterns:
        - 'ses.py'
    events:
      - http:
          path: send-email
          method: POST
          cors: true

resources:
  Resources:
    projekat6:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: projekat6
    filesMetadata:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: filesMetadata
        AttributeDefinitions:
          - AttributeName: object_key
            AttributeType: S
        KeySchema:
          - AttributeName: object_key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-user-pool
        # UsernameAttributes:
        #   - username
        AutoVerifiedAttributes:
          - email
          # - phone_number
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
        UsernameConfiguration:
          CaseSensitive: true
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
            - Name: verified_phone_number
              Priority: 2
        Schema:
          - AttributeDataType: String
            DeveloperOnlyAttribute: false
            Mutable: true
            Name: given_name
          - AttributeDataType: String
            DeveloperOnlyAttribute: false
            Mutable: true
            Name: family_name
          - AttributeDataType: String
            DeveloperOnlyAttribute: false
            Mutable: true
            Name: phone_number
          - AttributeDataType: String
            DeveloperOnlyAttribute: false
            Mutable: true
            Name: email
          - AttributeDataType: String
            DeveloperOnlyAttribute: false
            Mutable: true
            Name: preferred_username
          - AttributeDataType: String
            DeveloperOnlyAttribute: false
            Mutable: true
            Name: birthdate
        # EmailVerificationSubject: Verify your email for our app
        # EmailVerificationMessage: Please click the link below to verify your email address. {####} is your verification code.
        # SmsVerificationMessage: Your verification code for our app is {####}
        # MfaConfiguration: ON
        EmailConfiguration:
          EmailSendingAccount: COGNITO_DEFAULT

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-user-pool-client
        UserPoolId: !Ref CognitoUserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        TokenValidityUnits:
          AccessToken: minutes
          IdToken: minutes
          RefreshToken: days
        AccessTokenValidity: 30
        IdTokenValidity: 60
        RefreshTokenValidity: 10
        DefaultRedirectURI: http://localhost:4200/
        CallbackURLs:
          - http://localhost:4200/
        LogoutURLs:
          - http://localhost:4200/login
        SupportedIdentityProviders:
          - COGNITO
        AllowedOAuthFlows:
          - code
          - implicit
        AllowedOAuthScopes:
          - openid
          - email
          - profile

    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ApiGateway


    CognitoUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: album6
        UserPoolId: !Ref CognitoUserPool


    CognitoApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        Name: MyApiAuthorizer
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]

    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]

    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: SNSTopic

    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: aws.tim6@gmail.com
        Protocol: email
        TopicArn: {"Ref": "SNSTopic"}

    SESIdentity:
      Type: AWS::SES::EmailIdentity
      Properties: 
        EmailIdentity: aws.tim6@gmail.com

